//解法一（超时）
class Solution {
    public int arrayNesting(int[] nums) {
        int maxLen = 1;
        for (int i = 0; i < nums.length; i++) {
            int preNum = i;
            Set<Integer> table = new HashSet<>();
            while(!table.contains(nums[preNum])) {
                table.add(nums[preNum]);
                preNum = nums[preNum];
            }
            maxLen = Math.max(maxLen, table.size());
        }
        return maxLen;
    }
}

//解法二
class Solution {
    public int arrayNesting(int[] nums) {
        int maxLen = 1;
        boolean[] visited = new boolean[nums.length];
        for (int i = 0; i < nums.length; i++) {
            if (!visited[i]) {
                int preNum = i;
                Set<Integer> table = new HashSet<>();
                while(!table.contains(nums[preNum])) {
                    table.add(nums[preNum]);
                    preNum = nums[preNum];
                    visited[preNum] = true;
                }
                maxLen = Math.max(maxLen, table.size());
            }
        }
        return maxLen;
    }
}