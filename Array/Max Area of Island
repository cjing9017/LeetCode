class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        int max = 0;
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[i].length; j++) {
                if (!visited[i][j] && grid[i][j] == 1) {
                    visited[i][j] = true;
                    int localMax = localMaxAreaOfIsland(grid, visited, i, j) + 1;
                    max = localMax > max ? localMax : max;
                }
            }
        }
        return max;
    }

    private int localMaxAreaOfIsland(int[][] grid, boolean[][] visited, int r, int c){
        int localMax = 0;
        if (r-1 >= 0 && !visited[r-1][c] && grid[r-1][c] == 1) {
            visited[r-1][c] = true;
            localMax = localMax + localMaxAreaOfIsland(grid, visited, r-1, c) + 1;
        } //move up
        if (c+1 < grid[r].length && !visited[r][c+1] && grid[r][c+1] == 1) {
            visited[r][c+1] = true;
            localMax = localMax + localMaxAreaOfIsland(grid, visited, r, c+1) + 1;
        } //move right
        if (r+1 < grid.length && !visited[r+1][c] && grid[r+1][c] == 1) {
            visited[r+1][c] = true;
            localMax = localMax + localMaxAreaOfIsland(grid, visited, r+1, c) + 1;
        } //move down
        if (c-1 >= 0 && !visited[r][c-1] && grid[r][c-1] == 1) {
            visited[r][c-1] = true;
            localMax = localMax + localMaxAreaOfIsland(grid, visited, r, c-1) + 1;
        } //move left
        return localMax;
    }

}