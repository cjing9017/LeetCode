class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        
        Arrays.sort(candidates);
        find(result, new ArrayList<Integer>(), candidates, target, 0);
        
        return result;
    }
    
    private void find(List<List<Integer>> result, List<Integer> temp,
                     int[] candidates, int target, int start) {
        if (target == 0) {
            result.add(new ArrayList<Integer>(temp));
            return;
        }
        
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (candidates[i] <= target) {
                temp.add(candidates[i]);
                find(result, temp, candidates, target - candidates[i], i + 1);
                temp.remove(temp.size() - 1);
            }
        }
    }
}