class Solution {
    private boolean[] col;
    private boolean[] diagF;
    private boolean[] diagT;
        
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> result = new ArrayList<>();
        if (n <= 0) {
            return result;
        }
        
        col = new boolean[n];
        diagF = new boolean[2*n-1];
        diagT = new boolean[2*n-1];
        int[] pos = new int[n];
        find(0, result, pos, n);
        
        return result;
    }
    
    private void find(int row, List<List<String>> result, int[] pos, int n) {
        if (row == n) {
            generate(result, pos);
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (!col[i] && !diagT[row-i+n-1] && !diagF[row+i]) {
                pos[row] = i;
                col[i] = true;
                diagT[row-i+n-1] = true;
                diagF[row+i] = true;
                find(row + 1, result, pos, n);
                col[i] = false;
                diagT[row-i+n-1] = false;
                diagF[row+i] = false;
            }
        }
    }
    
    private void generate(List<List<String>> result, int[] pos) {
        List<String> temp = new ArrayList<>();
        for (int i = 0; i < pos.length; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < pos.length; j++) {
                if (pos[i] == j) {
                    sb.append("Q");
                } else {
                    sb.append(".");
                }
            }
            temp.add(sb.toString());
        }
        result.add(temp);
    }
}