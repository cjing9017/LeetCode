class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length == 0) return result;
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        getPermutation(nums, result, new ArrayList<>(), visited, 0);
        return result;
    }
    private void getPermutation(int[] nums, List<List<Integer>> result, 
                                List<Integer> list, boolean[] visited, int pos) {
        if (pos == nums.length) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) continue;
            list.add(nums[i]);
            visited[i] = true;
            getPermutation(nums, result, list, visited, pos + 1);
            visited[i] = false;
            list.remove(list.size() - 1);
        }
    }
}