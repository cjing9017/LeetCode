class Solution {
    public int[] singleNumber(int[] nums) {
        //用于存储数组中所有数的异或结果
        int xorResult = 0;
        for (int num : nums) {
            xorResult ^= num;
        }
        //获得二进制表示中出现的第一个1的位置
        int firstIndex = firstIndexIsOne(xorResult);
        //定义只出现了一次的两个元素
        int result1 = 0;
        int result2 = 0;
        for (int num : nums) {
            if (indexPositonIsOne(num, firstIndex)) result1 ^= num;
            else result2 ^= num;
        }
        return new int[] {result1, result2};
    }
    
    //判断数字的二进制表示中index位是否为1
    private boolean indexPositonIsOne(int num, int index) {
        return ((num >> index) & 0x1) == 1 ? true : false;
    }
    
    //从数字的二进制表示中的低位向高位找到第一个为1的位置
    private int firstIndexIsOne(int num) {
        int index = 0;
        while (index < 32 && (num & 0x1) == 0) {
            index++;
            num >>= 1;
        }
        return index;
    }
}