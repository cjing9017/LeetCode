/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) return result;
        Deque<Node> nodes = new ArrayDeque<>();
        nodes.addLast(root);
        while (!nodes.isEmpty()) {
            int len = nodes.size();
            List<Integer> temp = new ArrayList<>();
            while (len-- > 0) {
                Node node = nodes.removeFirst();
                temp.add(node.val);
                for (int i = 0; i < node.children.size(); i++) {
                    nodes.addLast(node.children.get(i));
                }
            }
            result.add(temp);
        }
        return result;
    }
}