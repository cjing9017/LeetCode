class Solution {
    private final int[][] dir = new int[][] {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> result = new ArrayList<>();
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return result;
        }
        
        int row = matrix.length;
        int col = matrix[0].length;
        LinkedList<int[]> queuePacific = new LinkedList<>();
        LinkedList<int[]> queueAtlantic = new LinkedList<>();
        boolean[][] visitedPacific = new boolean[row][col];
        boolean[][] visitedAtlantic = new boolean[row][col];
        
        for (int i = 0; i < row; i++) {
            queuePacific.addLast(new int[] {i, 0});
            queueAtlantic.addLast(new int[] {i, col - 1});
            visitedPacific[i][0] = true;
            visitedAtlantic[i][col-1] = true;
        }
        for (int i = 0; i < col; i++) {
            queuePacific.addLast(new int[] {0, i});
            queueAtlantic.addLast(new int[] {row - 1, i});
            visitedPacific[0][i] = true;
            visitedAtlantic[row-1][i] = true;
        }
        
        bfs(matrix, queuePacific, visitedPacific);
        bfs(matrix, queueAtlantic, visitedAtlantic);
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (visitedPacific[i][j] && visitedAtlantic[i][j]) {
                    result.add(Arrays.asList(i, j));
                }
            }
        }
        
        return result;
    }
    
    private void bfs(int[][] matrix, LinkedList<int[]> queue, boolean[][] visited) {
        int row = matrix.length;
        int col = matrix[0].length;
        while (!queue.isEmpty()) {
            int[] cur = queue.removeFirst();
            for (int[] p : dir) {
                int x = cur[0] + p[0];
                int y = cur[1] + p[1];
                if (x < 0 || x >= row || y < 0 || y >= col || visited[x][y] || matrix[x][y] < matrix[cur[0]][cur[1]]) {
                    continue;
                }
                visited[x][y] = true;
                queue.addLast(new int[] {x, y});
                bfs(matrix, queue, visited);
            }
        }
    }
}