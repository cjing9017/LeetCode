class Solution {
    private final int[][] dir = new int[][] {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public void solve(char[][] board) {
        if (board == null || board.length == 0 || board[0].length == 0 ||
           board.length <= 2 || board[0].length <= 2) {
            return;
        }
        
        int row = board.length;
        int col = board[0].length;
        
        for (int i = 0; i < row; i++) {
            if (board[i][0] == 'O') {
                flood(board, i, 0, row, col);
            }
            if (board[i][col - 1] == 'O') {
                flood(board, i, col - 1, row, col);
            }
        }
        
        for (int i = 1; i < col - 1; i++) {
            if (board[0][i] == 'O') {
                flood(board, 0, i, row, col);
            }
            if (board[row - 1][i] == 'O') {
                flood(board, row - 1, i, row, col);
            }
        }
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
        
    }
    
    private void flood(char[][] board, int x, int y, int row, int col) {
        if (board[x][y] == 'O') {
            board[x][y] = '1';
        }
        for (int i = 0; i < dir.length; i++) {
            int newX = x + dir[i][0];
            int newY = y + dir[i][1];
            if (valid(newX, newY, row, col) && board[newX][newY] == 'O') {
                flood(board, newX, newY, row, col);
            }
        }
    }
    
    private boolean valid(int x, int y, int row, int col) {
        return x >= 0 && x < row && y >= 0 && y < col;
    }
    
}