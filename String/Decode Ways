//解法一
class Solution {
    public int numDecodings(String s) {
       int[] memo = new int[s.length() + 1];
       return find(s, memo, 0); 
    }
    
    private int find(String s, int[] memo, int index) {
        if (index == s.length()) {
            return 1;
        }
        
        if (memo[index] != 0) {
            return memo[index];
        }
        
        int cnt = 0;
        for (int i = index + 1; i <= s.length(); i++) {
            int v = Integer.parseInt(s.substring(index, i));
           if (v > 0 && v <= 26) {
               cnt += find(s, memo, i);
           } else {
               break;
           } 
        }
        memo[index] = cnt;
        
        return cnt;
    }
}

//解法二
class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        for (int i = 2; i <= n; i++) {
            int oneDigit = Integer.parseInt(s.substring(i - 1, i));
            int twoDigit = Integer.parseInt(s.substring(i - 2, i));
            if (oneDigit > 0 && oneDigit <= 9) {
                dp[i] += dp[i - 1];
            }
            if (twoDigit >= 10 && twoDigit <= 26) {
                dp[i] += dp[i -2];
            }
        }
        
        return dp[n];
    }
}