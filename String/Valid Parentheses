class Solution {
    public boolean isValid(String s) {
        if(s.length() == 0){
            return true;
        }//空串
        Stack<Character> brackets = new Stack<>();
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            switch(ch){
                case ')':
                    if(brackets.isEmpty() || brackets.pop() != '(') return false;
                    break;
                case '}':
                    if(brackets.isEmpty() || brackets.pop() != '{') return false;
                    break;
                case ']':
                    if(brackets.isEmpty() || brackets.pop() != '[') return false;
                    break;
                default:
                    brackets.push(ch);//左半部分入栈
                    break;
            }
        }
        return brackets.isEmpty();//栈为空，说明正确匹配
    }
}

//解法二
class Solution {
    private static final char[] charMap = new char[256];
    static {
        for (int i = 0; i < 10; i++) {
            charMap[i + '0'] = (char)(i + 1);
        }
        for (int i = 0; i < 26; i++) {
            charMap[i + 'a'] = charMap[i + 'A'] = (char)(i + 11);
        }
    }
    public boolean isPalindrome(String s) {
        char[] sChar = s.toCharArray();
        int st = 0;
        int ed = sChar.length - 1;
        while (st < ed) {
            char ch1 = charMap[sChar[st]];
            char ch2 = charMap[sChar[ed]];
            if (ch1 != 0 && ch2 != 0) {
                if (ch1 != ch2) {
                    return false;
                }
                st++;
                ed--;
            } else {
                if (ch1 == 0) {
                    st++;
                }
                if (ch2 == 0) {
                    ed--;
                }
            }
        }
        return true;
    }
}