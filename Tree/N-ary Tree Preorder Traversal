/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

//解法一（递归）
class Solution {
    List<Integer> result = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if (root == null) return result;
        result.add(root.val);
        for (Node node : root.children) {
            preorder(node);
        }
        return result;
    }
}

//解法二（非递归）
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> result = new ArrayList<>();
        Stack<Node> treeNode = new Stack<>();
        if (root == null) return result;
        treeNode.push(root);
        while (!treeNode.isEmpty()) {
            Node temp = treeNode.pop();
            result.add(temp.val);
            for (int i = temp.children.size() - 1; i >= 0; i--) {
                treeNode.push(temp.children.get(i));
            }
        }
        return result;
    }
}