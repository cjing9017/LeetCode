class Solution {
    public String reverseVowels(String s) {
        int st = 0;
        int ed = s.length() - 1;
        StringBuilder result = new StringBuilder(s);
        while (st < ed) {
            while (st < s.length() && !isVowel(Character.toLowerCase(s.charAt(st)))) st++;
            while (ed >= 0 && !isVowel(Character.toLowerCase(s.charAt(ed)))) ed--;
            if (st >= ed) break;
            result.replace(st, st + 1, s.charAt(ed) + "");
            result.replace(ed, ed + 1, s.charAt(st) + "");
            st++;
            ed--;
        }
        return result.toString();
    }
    
    private boolean isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ? true : false;
    }
}

//解法二
class Solution {
    private static final char[] charMap = new char[256];
    static {
        charMap['a'] = charMap['A'] = 1;
        charMap['e'] = charMap['E'] = 1;
        charMap['i'] = charMap['I'] = 1;
        charMap['o'] = charMap['O'] = 1;
        charMap['u'] = charMap['U'] = 1;
    }
    public String reverseVowels(String s) {
        char[] sChar = s.toCharArray();
        int left = 0;
        int right = sChar.length - 1;
        while (left < right) {
            char chLeft = charMap[sChar[left]];
            char chRight = charMap[sChar[right]];
            if (chLeft != 0 && chRight != 0) {
                char temp = sChar[left];
                sChar[left] = sChar[right];
                sChar[right] = temp;
                left++;
                right--;
            } else {
                if (chLeft == 0) {
                    left++;
                }
                if (chRight == 0) {
                    right--;
                }
            }
        }
        return new String(sChar);
    }
}