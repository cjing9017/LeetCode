class Solution {
    
    private final int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    public int numIslands(char[][] grid) {
        int result = 0;
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return result;
        }
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (!visited[i][j] && grid[i][j] == '1') {
                    result++;
                    visited[i][j] = true;
                    flood(grid, visited, i, j);
                }
            }
        }
        
        return result;
    }
    
    private void flood(char[][] grid, boolean[][] visited, int x, int y) {
        for (int i = 0; i < dir.length; i++) {
            int newX = x + dir[i][0];
            int newY = y + dir[i][1];
            if (valid(newX, newY, grid.length, grid[0].length) && !visited[newX][newY] && grid[newX][newY] == '1') {
                visited[newX][newY] = true;
                flood(grid, visited, newX, newY);
            }
        }
    }
    
    private boolean valid(int x, int y, int r, int c) {
        return x >= 0 && x < r && y >= 0 && y < c;
    }
}